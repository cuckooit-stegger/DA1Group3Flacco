scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),3],
angle=340, main="Clustering using all features", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.top_ran.clust2$cluster], pch=19, cex.lab=1, type="p")
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),3],
angle=340, main="Clustering using only CM-Features", xlab="1 PC",
ylab="2 PC", zlab="3 PC",color=colors[bfeats3.ela.clust2$cluster], cex.lab=1, type="p", pch=19)
bfeats3.ela_ran.clust2 = kmeans(bfeats3.s[which(metadata3[,1]==3 & bfeats3[,1]==2),19:58], centers=2, nstart=25)
layout(matrix(1:2, ncol=2))
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),3],
angle=340, main="Clustering using all features", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.top_ran.clust2$cluster], pch=19, cex.lab=1, type="p")
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3 & bfeats3[,1]==2),3],
angle=340, main="Clustering using only ELA-Features", xlab="1 PC",
ylab="2 PC", zlab="3 PC",color=colors[bfeats3.ela_ran.clust2$cluster], cex.lab=1, type="p", pch=19)
bfeats3.ela.clust2 = kmeans(bfeats3.s[,19:58], centers=2, nstart=25)
layout(matrix(1:2, ncol=2))
#clusters 96% correct
scatterplot3d(bfeats3.pca_cor.ela$scores[,1],
bfeats3.pca_cor.ela$scores[,2],
bfeats3.pca_cor.ela$scores[,3],
angle=115, main="Clustering using all features", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.clust2$cluster], pch=19, cex.lab=1, type="p")
#clusters already 83% correctly
scatterplot3d(bfeats3.pca_cor.ela$scores[,1],
bfeats3.pca_cor.ela$scores[,2],
bfeats3.pca_cor.ela$scores[,3],
angle=115, main="Clustering using only ELA-Features", xlab="1 PC",
ylab="2 PC", zlab="3 PC",color=colors[bfeats3.ela.clust2$cluster], cex.lab=1, type="p", pch=19)
require(stats)
sapply(c("average", "single", "complete"),
function(method) plot(hclust(dist(iris[,-5]), method),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram nn(", method,
" linkage)", sep = ""),
cex = 2, cex.axis = 2, cex.lab = 2, cex.main = 2))
layout(matrix(1:3, ncol=3))
sapply(c("average", "single", "complete"),
function(method) plot(hclust(dist(iris[,-5]), method),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram nn(", method,
" linkage)", sep = ""),
cex = 2, cex.axis = 2, cex.lab = 2, cex.main = 2))
par(mar = c(0, 5, 4, 2) + 0.1)
layout(matrix(1:3, ncol=3))
sapply(c("average", "single", "complete"),
function(method) plot(hclust(dist(iris[,-5]), method),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram nn(", method,
" linkage)", sep = ""),
cex = 2, cex.axis = 2, cex.lab = 2, cex.main = 2))
par(mar = c(0, 5, 4, 2) + 0.1)
layout(matrix(1:3, ncol=3))
sapply(c("average", "single", "complete"),
function(method) plot(hclust(dist(iris[,-5]), method),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram nn(", method,
" linkage)", sep = ""),
cex = 1, cex.axis = 1, cex.lab = 1, cex.main = 1))
par(mar = c(0, 5, 4, 2) + 0.1)
layout(matrix(1:6, ncol=3))
sapply(c("average", "single", "complete"),
function(method) plot(hclust(dist(iris[,-5]), method),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram nn(", method,
" linkage)", sep = ""),
cex = 1, cex.axis = 1, cex.lab = 1, cex.main = 1))
aggl_dend.custom <- function(data, methods=c("single", "complete", "average")) {
#set margin settings and layout
par(mar = c(0, 5, 4, 2) + 0.1)
layout(matrix(1:6, ncol=3))
#create dendrograms applying different methods
sapply(methods,
function(x) plot(hclust(dist(data), x),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram(" , x,
" linkage)"),
cex = 1, cex.axis = 1, cex.lab = 1, cex.main = 1))
}
aggl_dend.custom(iris[,-5])
aggl_dend.custom(iris[,-5])
aggl_dend.custom(iris[,1:2])
?hclust
#custom function for creating dendrograms with agglomerative clustering to the
#methods defind in the parameter settings
aggl_dend.custom <- function(data, methods=c("single", "complete", "average", "centroid", "ward.D", "ward.D2")) {
#set margin settings and layout
par(mar = c(0, 5, 4, 2) + 0.1)
layout(matrix(1:6, ncol=3, byrow=TRUE))
#create dendrograms applying different methods
sapply(methods,
function(x) plot(hclust(dist(data), x),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram(" , x,
" linkage)"),
cex = 1, cex.axis = 1, cex.lab = 1, cex.main = 1))
}
aggl_dend.custom(iris[,1:2])
aggl_dend.custom(bfeats3[,2:58])
aggl_dend.custom <- function(data, methods=c("single", "complete", "average", "centroid", "ward.D", "ward.D2")) {
#set margin settings and layout
par(mar = c(0, 5, 4, 2) + 0.1)
layout(matrix(1:6, ncol=3, byrow=TRUE))
#create dendrograms applying different methods
sapply(methods,
function(x) plot(hclust(dist(data), x),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram(", x,
" linkage)"),
cex = 1, cex.axis = 1, cex.lab = 1, cex.main = 1))
}
aggl_dend.custom(bfeats3[which(metadata3[,1]==3 & bfeats3[,1]==1),2:58])
aggl_dend.custom(bfeats3[which(metadata3[,1]==3 & bfeats3[,1]==2),2:58])
aggl_dend.custom(bfeats3[which(metadata3[,1]==3 & bfeats3[,1]==1),2:18])
aggl_dend.custom(bfeats3[which(metadata3[,1]==3 & bfeats3[,1]==2),19:58])
aggl_dend.custom(bfeats3[which(metadata3[,1]==3 & bfeats3[,1]==1),19:58])
aggl_dend.custom(bfeats3[which(metadata3[,1]==3),19:58])
load("../3-DataPreprocessing.RData")
require(cluster)
dv = diana(bfeats3[1:10,2:3], diss=FALSE, metric="euclidean")
dv
groups = cutree(as.hclust(dv), k=2)
plot(dv)
dv = diana(bfeats3[1:10,2:5], diss=FALSE, metric="euclidean")
plot(dv)
dv = diana(bfeats3[1:100,2:5], diss=FALSE, metric="euclidean")
plot(dv)
dv = diana(bfeats3[1:1000,2:5], diss=FALSE, metric="euclidean")
plot(dv)
groups = cutree(as.hclust(dv), k=2)
groups
dv = diana(bfeats3[1:100,2:18], diss=FALSE, metric="euclidean")
plot(dv)
dv = diana(bfeats3[1:500,2:18], diss=FALSE, metric="euclidean")
plot(dv)
dv = diana(bfeats3[1:500,19:58], diss=FALSE, metric="euclidean")
plot(dv)
dv = diana(bfeats3[1:1000,19:58], diss=FALSE, metric="euclidean")
plot(dv)
dv = diana(bfeats3[1:1500,19:58], diss=FALSE, metric="euclidean")
plot(dv)
layout(matrix(1:2, ncol=2))
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),3],
angle=80, main="Agglomerative Clustering (4 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.ran.aggl.av$group],pch=19)
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),3],
angle=80, main="KMeans Algorithm (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.ela_ran.clust2$cluster],pch=19)
require(scatterplot3d)
layout(matrix(1:2, ncol=2))
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),3],
angle=80, main="Agglomerative Clustering (4 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.ran.aggl.av$group],pch=19)
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),3],
angle=80, main="KMeans Algorithm (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.ela_ran.clust2$cluster],pch=19)
bfeats3.block3.ran.aggl.av =  hclust(dist(bfeats3[which(metadata3[,1]==3& bfeats3[,1]==2),19:58]), method="ward.D")
bfeats3.block3.ran.aggl.av$group = cutree(bfeats3.block3.ran.aggl.av, k=4)
layout(matrix(1:2, ncol=2))
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),3],
angle=80, main="Agglomerative Clustering (4 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.ran.aggl.av$group],pch=19)
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),3],
angle=80, main="KMeans Algorithm (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.ela_ran.clust2$cluster],pch=19)
dv = diana(bfeats3[1:500,2:58], diss=FALSE, metric="euclidean")
dv = diana(bfeats3[1:1000,2:58], diss=FALSE, metric="euclidean")
pairs_noreg.custom <- function(x, m, color=colors[1], legend.title="no", legend.text=NULL, legend.col=NULL,
pch=19, legend.pch = 19) {
#use full window for legend
par(xpd=TRUE)
oma = c(4,4,6,6)
#different margins in case of legend
if(legend.title != "no") {
oma = c(4,4,6,12)
}
#plot the scatterplots
pairs(x, panel = function (x, y, ...) {
points(x, y, ...)
#include correlation coefficients in upper panel and histograms on diagonal
}, pch=pch, diag.panel=panel.hist2, main=m, col=color, oma=oma)
#put legend
#only if legend required
if(legend.title != "no") {
legend("right",legend=legend.text, col=legend.col, pch=legend.pch, title=legend.title, cex=0.8)
}
}
bfeats3.pca_cor = princomp(bfeats3[,-c(1,49)], cor=TRUE, scores=TRUE)
bfeats3.clust2 = kmeans(bfeats3.s, centers=2, nstart=25)
pairs_noreg.custom(bfeats3.pca_cor$scores[,1:6], m="Scatterplot on PCs (2 clusters)", col=colors[bfeats3.clust2$cluster],
legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[1:2])
bfeats3.clust2 = kmeans(bfeats3.s, centers=2, nstart=25)
bfeats3.s = sweep(bfeats3, 2, sapply(bfeats3, function(x) diff(range(x))), FUN='/')
bfeats3.clust2 = kmeans(bfeats3.s, centers=2, nstart=25)
pairs_noreg.custom(bfeats3.pca_cor$scores[,1:6], m="Scatterplot on PCs (2 clusters)", col=colors[bfeats3.clust2$cluster],
legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[1:2])
require(cluster)
dv = diana(bfeats3[1:1000,2:58], diss=FALSE, metric="euclidean")
plot(dv)
dv$cluster = cutree(as.hclust(dv), k=2)
pairs_noreg.custom(bfeats3.pca_cor$scores[,1:6], m="Scatterplot on PCs (2 clusters)", col=colors[dv$cluster],
legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[1:2])
dv$cluster = cutree(as.hclust(dv), k=3)
pairs_noreg.custom(bfeats3.pca_cor$scores[,1:6], m="Scatterplot on PCs (2 clusters)", col=colors[dv$cluster],
legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[1:2])
scatterplot3d.custom(bfeats3.pca_cor$scores[,1], bfeats3.pca_cor$scores[,2], bfeats3.pca_cor$scores[,3],
angle=75, main="3D Scatterplot on 1., 2., 3. PC (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", col=colors[dv$cluster], legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[c(1,2)])
pairs_noreg.custom(bfeats3.pca_cor$scores[1:1000,1:6], m="Scatterplot on PCs (2 clusters)", col=colors[dv$cluster],
legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[1:2])
scatterplot3d.custom(bfeats3.pca_cor$scores[1:1000,1], bfeats3.pca_cor$scores[1:1000,2], bfeats3.pca_cor$scores[1:1000,3],
angle=75, main="3D Scatterplot on 1., 2., 3. PC (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", col=colors[dv$cluster], legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[c(1,2)])
plot(dv)
dv = diana(bfeats3[1:1000,2:18], diss=FALSE, metric="euclidean")
dv$cluster = cutree(as.hclust(dv), k=2)
pairs_noreg.custom(bfeats3.pca_cor$scores[1:1000,1:6], m="Scatterplot on PCs (2 clusters)", col=colors[dv$cluster],
legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[1:2])
scatterplot3d.custom(bfeats3.pca_cor$scores[1:1000,1], bfeats3.pca_cor$scores[1:1000,2], bfeats3.pca_cor$scores[1:1000,3],
angle=75, main="3D Scatterplot on 1., 2., 3. PC (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", col=colors[dv$cluster], legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[c(1,2)])
pairs_noreg.custom(bfeats3.pca_cor$scores[1:1000,1:6], m="Scatterplot on PCs (2 clusters)", col=colors[dv$cluster],
legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[1:2])
install.packages("dbscan")
library(dbscan)
require(dbscan)
db = dbscan(bfeats3_s[1:100,2:3], eps=.4)
bfeats3.s = sweep(bfeats3, 2, sapply(bfeats3, function(x) diff(range(x))), FUN='/')
db = dbscan(bfeats3_s[1:100,2:3], eps=.4)
db = dbscan(bfeats3.s[1:100,2:3], eps=.4)
db
db = dbscan(bfeats3.s[1:1000,2:3], eps=.4)
db
db = dbscan(bfeats3.s[1:1000,2:58], eps=.4)
db
db = dbscan(bfeats3.s[,2:58], eps=.4)
db
dbscan(bfeats3.s[,2:58], eps=.5)
dbscan(bfeats3.s[,2:58], eps=.1)
dbscan(bfeats3.s[,2:58], eps=.2)
dbscan(bfeats3.s[,2:58], eps=.3)
dbscan(bfeats3.s[,2:58], eps=.4)
dbscan(bfeats3.s[,2:58], eps=.3)
dbscan(bfeats3.s[,2:58], eps=.35)
dbscan(bfeats3.s[,2:58], eps=.31)
dbscan(bfeats3.s[,2:58], eps=.32)
db = dbscan(bfeats3.s[,2:58], eps=.32)
db$cluster
db = dbscan(bfeats3.s[,2:58], eps=.32, minPts=100)
db
db = dbscan(bfeats3.s[,2:58], eps=.4, minPts=100)
db
dbscan(bfeats3.s[,2:58], eps=.4, minPts=100)
dbscan(bfeats3.s[,2:58], eps=.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=1.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=3.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=6.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=16.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=106.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=1006.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=10006.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=1000006.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=1000000006.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=1000000000006.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=1000000000006.6, minPts=10)
dbscan(bfeats3.s[,2:58], eps=1000000000006.6, minPts=1)
dbscan(bfeats3.s[,2:58], eps=.6, minPts=1)
dbscan(bfeats3.s[,2:58], eps=.6, minPts=100)
dbscan(bfeats3.s[,2:58], eps=.99, minPts=100)
dbscan(bfeats3.s[,2:58], eps=.99, minPts=500)
dbscan(bfeats3.s[,2:58], eps=.9999, minPts=500)
dbscan(bfeats3.s[,2:58], eps=.999999, minPts=500)
dbscan(bfeats3.s[,2:58], eps=.999999999, minPts=500)
dbscan(bfeats3.s[,2:58], eps=.999999999999, minPts=500)
dbscan(bfeats3.s[,2:58], eps=.999999999999999, minPts=500)
dbscan(bfeats3.s[,2:58], eps=.999999999999999999, minPts=500)
dbscan(bfeats3.s[,2:58], minPts=500)
dbscan(bfeats3.s[,2:58], eps=.9999999999999999999999999999, minPts=500)
dbscan(bfeats3.s[,2:58], eps=.9999999999999999999999999999, minPts=300)
aggl_dend.custom(bfeats3.s[,2:58])
aggl_dend.custom <- function(data, methods=c("single", "complete", "average", "centroid", "ward.D", "ward.D2")) {
#set margin settings and layout
par(mar = c(0, 5, 4, 2) + 0.1)
layout(matrix(1:6, ncol=3, byrow=TRUE))
#create dendrograms applying different methods
sapply(methods,
function(x) plot(hclust(dist(data), x),
hang = -1,
labels = FALSE,
las = 1,
xlab = "",
sub = "",
main = paste("Cluster Dendrogram(", x,
" linkage)"),
cex = 1, cex.axis = 1, cex.lab = 1, cex.main = 1))
}
aggl_dend.custom(bfeats3.s[,2:58])
bfeats3.s = sweep(bfeats3, 2, sapply(bfeats3, function(x) diff(range(x))), FUN='/')
aggl_dend.custom(bfeats3.s[,2:58])
bfeats3.aggl.wardD =  hclust(dist(bfeats3.s[,2:58]), method="ward.D")
bfeats3.aggl.wardD$group = cutree(bfeats3.aggl.wardD, k=2)
pairs_noreg.custom(bfeats3.pca_cor$scores[,1:6], m="Scatterplot on PCs (2 clusters)",
col=colors[bfeats3.aggl.wardD$group],
legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[1:2])
scatterplot3d.custom(bfeats3.pca_cor$scores[,1], bfeats3.pca_cor$scores[,2], bfeats3.pca_cor$scores[,3],
angle=75, main="Agglomerative clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", col=colors[bfeats3.aggl.wardD$group], legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[c(1,2)])
scatterplot3d.custom <- function(x, y, z, angle, main, xlab, ylab, zlab, col, legend.text, legend.col, legend.title) {
#reset window settings
par.reset(main = main)
layout(rbind(1,2), heights=c(7,1))
scatterplot3d(x, y, z, angle=angle, pch=19, cex.lab=1, type="p", main=main, xlab=xlab,
ylab=ylab, zlab=zlab, color=col)
par(mar=c(0,0,0,0))
plot.new()
if(legend.title != "no") {
legend('center','groups',legend=legend.text, col=legend.col, pch=19, title=legend.title, bty ="n", horiz=TRUE, cex=0.8)
}
#reset normal settings
layout(matrix(1, ncol=1))
par(mar=c(8,5,5,5))
dev.off()
}
scatterplot3d.custom(bfeats3.pca_cor$scores[,1], bfeats3.pca_cor$scores[,2], bfeats3.pca_cor$scores[,3],
angle=75, main="Agglomerative clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", col=colors[bfeats3.aggl.wardD$group], legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[c(1,2)])
par.reset = function(main = "") {
par = par.defaults
#write plot to pdf?
if(pdf.create == T) {
pdf.filename.main = main
pdf.filename = paste(pdf.filename.section, pdf.filename.index, pdf.filename.main, sep="_")
pdf(paste(pdf.path, pdf.filename, ".pdf", sep = ""), width = 11.69, height = 8,27)
debug.msg(paste(pdf.path, pdf.filename, ".pdf", sep = ""))
}
#increase index for pdf files
pdf.filename.index <<- pdf.filename.index + 1
}
scatterplot3d.custom(bfeats3.pca_cor$scores[,1], bfeats3.pca_cor$scores[,2], bfeats3.pca_cor$scores[,3],
angle=75, main="Agglomerative clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", col=colors[bfeats3.aggl.wardD$group], legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[c(1,2)])
debug = F
#method to print debug messages, if debug is true
debug.msg = function(s) {
#only print message if debug is true
if(debug == T) {
print(s)
}
}
#save default graphical parameters to be able to restore them before each new plot
par.defaults = par(no.readonly = T)
#write plots to pdf?
pdf.create = T
#pdf file settings
pdf.path = "../plots/"
pdf.filename.section = "1-1"
pdf.filename.index = 1
pdf.filename.main = ""
#method to restore default graphical parameters
par.reset = function(main = "") {
par = par.defaults
#write plot to pdf?
if(pdf.create == T) {
pdf.filename.main = main
pdf.filename = paste(pdf.filename.section, pdf.filename.index, pdf.filename.main, sep="_")
pdf(paste(pdf.path, pdf.filename, ".pdf", sep = ""), width = 11.69, height = 8,27)
debug.msg(paste(pdf.path, pdf.filename, ".pdf", sep = ""))
}
#increase index for pdf files
pdf.filename.index <<- pdf.filename.index + 1
}
scatterplot3d.custom(bfeats3.pca_cor$scores[,1], bfeats3.pca_cor$scores[,2], bfeats3.pca_cor$scores[,3],
angle=75, main="Agglomerative clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", col=colors[bfeats3.aggl.wardD$group], legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[c(1,2)])
require(scatterplot3d)
scatterplot3d.custom(bfeats3.pca_cor$scores[,1], bfeats3.pca_cor$scores[,2], bfeats3.pca_cor$scores[,3],
angle=75, main="Agglomerative clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", col=colors[bfeats3.aggl.wardD$group], legend.title="Cluster",
legend.text=c("1", "2"), legend.col=colors[c(1,2)])
section.new("2-3-2")
section.new = function(section = "1.1") {
#set section for pdf filename
pdf.filename.section <<- section
#reset filename index to 1
pdf.filename.index <<- 1
}
section.new("2-3-2")
aggl_dend.custom(bfeats3.s[which(metadata3[,1]==3),2:58])
bfeats3.block3.aggl.wardD =  hclust(dist(bfeats3.s[which(metadata3[,1]==3),2:58]), method="ward.D")
bfeats3.block3.aggl.wardD$group = cutree(bfeats3.block3.aggl.wardD, k=2)
layout(matrix(1:2, ncol=2))
scatterplot3d(bfeats3.pca_cor$scores[which(metadata3[,1]==3),1],
bfeats3.pca_cor$scores[which(metadata3[,1]==3),2],
bfeats3.pca_cor$scores[which(metadata3[,1]==3),3],
angle=200, main="Agglomerative Clustering (4 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.aggl.wardD$group],pch=19)
scatterplot3d(bfeats3.pca_cor$scores[which(metadata3[,1]==3),1],
bfeats3.pca_cor$scores[which(metadata3[,1]==3),2],
bfeats3.pca_cor$scores[which(metadata3[,1]==3),3],
angle=200, main="Kmeans algorithm (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.clust2$cluster],pch=19)
scatterplot3d(bfeats3.pca_cor$scores[which(metadata3[,1]==3),1],
bfeats3.pca_cor$scores[which(metadata3[,1]==3),2],
bfeats3.pca_cor$scores[which(metadata3[,1]==3),3],
angle=200, main="Agglomerative Clustering (4 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.aggl.wardD$group],pch=19)
aggl_dend.custom(bfeats3.s[which(metadata3[,1]==3 & bfeats3[,1]==1),2:18])
bfeats3.block3.fun.aggl.av =  hclust(dist(bfeats3.s[which(metadata3[,1]==3& bfeats3[,1]==1),2:18]), method="average")
bfeats3.block3.fun.aggl.av$group = cutree(bfeats3.block3.fun.aggl.av, k=2)
scatterplot3d(bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),1],
bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),2],
bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),3],
angle=80, main="Agglomerative Clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.fun.aggl.av$group],pch=19)
bfeats3.pca_cor.cm = princomp(bfeats3[,2:18], cor=TRUE, scores=TRUE)
bfeats3.pca_cor.ela = princomp(bfeats3[,c(19:48,50:58)], cor=TRUE, scores=TRUE)
scatterplot3d(bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),1],
bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),2],
bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),3],
angle=80, main="Agglomerative Clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.fun.aggl.av$group],pch=19)
layout(matrix(1:2, ncol=2))
scatterplot3d(bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),1],
bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),2],
bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),3],
angle=80, main="Agglomerative Clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.fun.aggl.av$group],pch=19)
scatterplot3d(bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),1],
bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),2],
bfeats3.pca_cor.cm$scores[which(metadata3[,1]==3& bfeats3[,1]==1),3],
angle=20, main="Agglomerative Clustering (2 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.fun.aggl.av$group],pch=19)
aggl_dend.custom(bfeats3.s[which(metadata3[,1]==3, bfeats3[,1]==2),19:58])
bfeats3.block3.ran.aggl.av =  hclust(dist(bfeats3.s[which(metadata3[,1]==3& bfeats3[,1]==2),19:58]), method="ward.D")
bfeats3.block3.ran.aggl.av$group = cutree(bfeats3.block3.ran.aggl.av, k=2)
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),3],
angle=80, main="Agglomerative Clustering (4 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.ran.aggl.av$group],pch=19)
layout(matrix(1:2, ncol=2))
scatterplot3d(bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),1],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),2],
bfeats3.pca_cor.ela$scores[which(metadata3[,1]==3& bfeats3[,1]==2),3],
angle=80, main="Agglomerative Clustering (4 clusters)", xlab="1 PC",
ylab="2 PC", zlab="3 PC", color=colors[bfeats3.block3.ran.aggl.av$group],pch=19)
