mapply(boxcox_view.custom, before_data=bfeats[,1:5])
str(bfeats[,1])
str(bfeats)
normal.custom <- function(x, title, col=colors[1], round=6) {
#draw qqplot
qqnorm(x, main = title,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", col=col)
#insert "optimal" line
qqline(x,lwd=2,col="red")
#view histogram and p-value of SW-Test
hist(x, main = paste("SW-Test: ", round(shapiro.test(x)$p.value, round)), col="cyan", xlab="")
}
layout(matrix(1:10, ncol=5,nrow=2))
mapply(normal.custom, x=bfeats[,1:5], title=colnames(bfeats)[1:5])
boxcox_view.custom <- function(before_data, col=colors[1]) {
#draw qqplot before
qqnorm(before_data, main = title,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
hist(x, main = paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)), col="cyan", xlab="")
##qqplot after transformation
#qqnorm(after_data, pch=19, xlab="",
#      cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value), 6),
#     col=col)
#insert "optimal" line
#qqline(after_data,lwd=2,col="red")
}
mapply(boxcox_view.custom, before_data=bfeats[,1:5])
boxcox_view.custom <- function(before_data, col=colors[1], round=6) {
#draw qqplot before
qqnorm(before_data, main = title,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
hist(x, main = paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)), col="cyan", xlab="")
##qqplot after transformation
#qqnorm(after_data, pch=19, xlab="",
#      cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value), 6),
#     col=col)
#insert "optimal" line
#qqline(after_data,lwd=2,col="red")
}
mapply(boxcox_view.custom, before_data=bfeats[,1:5])
boxcox_view.custom <- function(before_data, col=colors[1], round=6) {
#draw qqplot before
qqnorm(before_data, main = "title" ,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
hist(x, main = paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)), col="cyan", xlab="")
##qqplot after transformation
#qqnorm(after_data, pch=19, xlab="",
#      cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value), 6),
#     col=col)
#insert "optimal" line
#qqline(after_data,lwd=2,col="red")
}
mapply(boxcox_view.custom, before_data=bfeats[,1:5])
boxcox_view.custom <- function(before_data, col=colors[1], round=6) {
#draw qqplot before
qqnorm(before_data, main = "title" ,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
hist(before_data, main = paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)), col="cyan", xlab="")
##qqplot after transformation
#qqnorm(after_data, pch=19, xlab="",
#      cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value), 6),
#     col=col)
#insert "optimal" line
#qqline(after_data,lwd=2,col="red")
}
mapply(boxcox_view.custom, before_data=bfeats[,1:5])
layout(matrix(1:10,ncol=5))
mapply(boxcox_view.custom, before_data=bfeats[,1:5])
boxcox_view.custom <- function(before_data, title, col=colors[1], round=6) {
#draw qqplot before
qqnorm(before_data, main = "title" ,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", xlab="paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round))",
col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
hist(before_data, main = paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)), col="cyan", xlab="")
##qqplot after transformation
#qqnorm(after_data, pch=19, xlab="",
#      cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value), 6),
#     col=col)
#insert "optimal" line
#qqline(after_data,lwd=2,col="red")
}
boxcox_view.custom <- function(before_data, title, col=colors[1], round=6) {
#draw qqplot before
qqnorm(before_data, main = title ,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", xlab= paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)),
col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
hist(before_data, main = paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)), col="cyan", xlab="")
##qqplot after transformation
#qqnorm(after_data, pch=19, xlab="",
#      cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value), 6),
#     col=col)
#insert "optimal" line
#qqline(after_data,lwd=2,col="red")
}
mapply(boxcox_view.custom, before_data=bfeats[,1:5], title=colnames(bfeats)[1:5])
layout(matrix(1:10,ncol=5))
mapply(boxcox_view.custom, before_data=bfeats[,1:5], title=colnames(bfeats)[1:5])
boxcox_view.custom <- function(before_data, after_data, title, col=colors[1], round=6) {
#draw qqplot before
qqnorm(before_data, main = title ,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", xlab= paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)),
col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
##qqplot after transformation
qqnorm(after_data, pch=19, xlab="",
cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value), 6),
col=col)
#insert "optimal" line
#qqline(after_data,lwd=2,col="red")
}
mapply(boxcox_view.custom, before_data=bfeats[,1:5], after_data=bfeats[,1:5], title=colnames(bfeats)[1:5])
mapply(boxcox_view.custom, before_data=bfeats[,1:5], after_data=bfeats.boxcox2[,1:5], title=colnames(bfeats)[1:5])
boxcox_view.custom <- function(before_data, after_data, title, col=colors[1], round=6) {
#draw qqplot before
qqnorm(before_data, main = title ,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", xlab= paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)),
col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
##qqplot after transformation
qqnorm(after_data, pch=19, xlab="",
cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value), 6),
col=col)
#insert "optimal" line
qqline(after_data,lwd=2,col="red")
}
boxcox_view.custom <- function(before_data, after_data, title, col=colors[1], round=6) {
#draw qqplot before
qqnorm(before_data, main = title ,pch=19,
cex.lab=1,cex.main=1,ylab="Sample Quantiles", xlab= paste("SW-Test: ", round(shapiro.test(before_data)$p.value, round)),
col=col)
#insert "optimal" line
qqline(before_data,lwd=2,col="red")
#view histogram and p-value of SW-Test
##qqplot after transformation
qqnorm(after_data, pch=19, xlab="",
cex.lab=1,cex.main=1,ylab="", main= paste("SW-Test: ", round(shapiro.test(after_data)$p.value, 6)),
col=col)
#insert "optimal" line
qqline(after_data,lwd=2,col="red")
}
mapply(boxcox_view.custom, before_data=bfeats[,1:5], after_data=bfeats.boxcox2[,1:5], title=colnames(bfeats)[1:5])
mapply(boxcox_view.custom, before_data=bfeats[,6:10], after_data=bfeats.boxcox2[,6:10], title=colnames(bfeats)[6:10])
layout(matrix(1:10,ncol=5))
mapply(boxcox_view.custom, before_data=bfeats[,1:5], after_data=bfeats.boxcox[,1:5], title=colnames(bfeats)[1:5])
bfeats.boxcox = boxcox.custom(bfeats, c(2:10, 15:19, 21:29, 31:36, 38:43, 45, 47:49, 51, 53:56))
save(bfeats.boxcox,bfeats.boxcox2, file="../3-boxcox.RData")
layout(matrix(1:10,ncol=5))
mapply(boxcox_view.custom, before_data=bfeats[,1:5], after_data=bfeats.boxcox[,1:5], title=colnames(bfeats)[1:5])
mapply(boxcox_view.custom, before_data=bfeats[,6:10], after_data=bfeats.boxcox[,6:10], title=colnames(bfeats)[6:10])
mapply(boxcox_view.custom, before_data=bfeats[,11:15], after_data=bfeats.boxcox[,11:15], title=colnames(bfeats)[11:15])
mapply(boxcox_view.custom, before_data=bfeats[,16:20], after_data=bfeats.boxcox[,16:20], title=colnames(bfeats)[16:20])
mapply(boxcox_view.custom, before_data=bfeats[,21:25], after_data=bfeats.boxcox[,21:25], title=colnames(bfeats)[21:25])
mapply(boxcox_view.custom, before_data=bfeats[,26:30], after_data=bfeats.boxcox[,26:30], title=colnames(bfeats)[26:30])
mapply(boxcox_view.custom, before_data=bfeats[,31:35], after_data=bfeats.boxcox[,31:35], title=colnames(bfeats)[31:35])
mapply(boxcox_view.custom, before_data=bfeats[,36:40], after_data=bfeats.boxcox[,36:40], title=colnames(bfeats)[36:40])
mapply(boxcox_view.custom, before_data=bfeats[,41:45], after_data=bfeats.boxcox[,41:45], title=colnames(bfeats)[41:45])
mapply(boxcox_view.custom, before_data=bfeats[,46:50], after_data=bfeats.boxcox[,46:50], title=colnames(bfeats)[46:50])
mapply(boxcox_view.custom, before_data=bfeats[,51:55], after_data=bfeats.boxcox[,51:55], title=colnames(bfeats)[51:55])
mapply(boxcox_view.custom, before_data=bfeats[,56:59], after_data=bfeats.boxcox[,56:59], title=colnames(bfeats)[56:59])
mapply(boxcox_view.custom, before_data=bfeats[,31:35], after_data=bfeats.boxcox[,31:35], title=colnames(bfeats)[31:35])
layout(matrix(1:10,ncol=5))
mapply(boxcox_view.custom, before_data=bfeats[,31:35], after_data=bfeats.boxcox[,31:35], title=colnames(bfeats)[31:35])
normal_multi.custom(bfeats, main="Test for multivariate normal distribution")
normal_multi.custom <- function(data, main, outl = FALSE, col=colors[1]) {
cm = colMeans(data)
S = cov(data)
#calculating distances in the multidimensional room
dis = apply(data, 1, function(x) t(x-cm) %*% ginv(S) %*% (x-cm))
#resetting layout
layout(matrix(1:1, ncol=1, nrow=1))
#plotting x^2 plot with datpoints
#df = number of cols in data
plot(qc <- qchisq((1:nrow(data)-1/2)/nrow(data), df=ncol(data)),
sd <-  sort(dis), xlab=expression(paste(chi^2, " Quantile")),
ylab="Ordered Distances", main=main,
pch=19,cex.lab=1,cex.axis=1,cex=1, col=col)
#adding "optimal normally distribtion" line
abline(a=0,b=1,col= "red",lwd=2)
#in case of outliers mark them
if(outl) {
out =  which(rank(abs(qc-sd), ties= "random") > nrow(data)-3)
print(out)
#show up rownumbers instead of rownames
text(qc[out], sd[out]-1.5,
which(attributes(data)$row.names == names(out)),cex=1,col="blue")
}
}
normal_multi.custom(bfeats, main="Test for multivariate normal distribution")
layout(matrix(1:2, ncol=2))
normal_multi.custom(bfeats, main="Before Boxcox")
normal_multi.custom(bfeats.boxcox, main="After Boxcox")
layout(matrix(1:2, ncol=2))
normal_multi.custom(bfeats, main="Before Boxcox")
normal_multi.custom <- function(data, main, outl = FALSE, col=colors[1]) {
cm = colMeans(data)
S = cov(data)
#calculating distances in the multidimensional room
dis = apply(data, 1, function(x) t(x-cm) %*% ginv(S) %*% (x-cm))
#plotting x^2 plot with datpoints
#df = number of cols in data
plot(qc <- qchisq((1:nrow(data)-1/2)/nrow(data), df=ncol(data)),
sd <-  sort(dis), xlab=expression(paste(chi^2, " Quantile")),
ylab="Ordered Distances", main=main,
pch=19,cex.lab=1,cex.axis=1,cex=1, col=col)
#adding "optimal normally distribtion" line
abline(a=0,b=1,col= "red",lwd=2)
#in case of outliers mark them
if(outl) {
out =  which(rank(abs(qc-sd), ties= "random") > nrow(data)-3)
print(out)
#show up rownumbers instead of rownames
text(qc[out], sd[out]-1.5,
which(attributes(data)$row.names == names(out)),cex=1,col="blue")
}
}
layout(matrix(1:2, ncol=2, nrow=1))
normal_multi.custom(bfeats, main="Before Boxcox")
normal_multi.custom(bfeats.boxcox, main="After Boxcox")
require(mvShapiroTest)
mvShapiro.Test(as.matrix(bfeats))$p.value
mvShapiro.Test(as.matrix(bfeats.boxcox))$p.value
normal_multi.custom(bfeats.cm_angle, main="Test for multivariate normal distribution (cm_angle)")
dotplot <- function(x, title, digits=2) {
stripchart(round(x),method="stack",offset=0.5,pch=1,main=title))
}
dotplot <- function(x, title) {
stripchart(round(x),method="stack",offset=0.5,pch=1,main=title))
}
dotplot <- function(x, title) {
stripchart(round(x),method="stack",offset=0.5,pch=1,main=title)
}
dotplot(bfeats[,1], colnames(bfeats)[1])
?stripchart
dotplot(bfeats[,1], colnames(bfeats)[1])
dotplot(bfeats[,2], colnames(bfeats)[1])
stripchart(round(x),method="stack",pch=1,main=title)
dotplot <- function(x, title) {
stripchart(round(x),method="stack",pch=1,main=title)
}
dotplot(bfeats[,2], colnames(bfeats)[1])
dotplot(bfeats[,3], colnames(bfeats)[1])
dotplot(bfeats[,6], colnames(bfeats)[1])
dotplot <- function(x, title) {
stripchart(x,method="stack",pch=1,main=title)
}
dotplot(bfeats[,6], colnames(bfeats)[1])
dotplot(bfeats[,3], colnames(bfeats)[1])
dotplot(bfeats[which(metadata[,6]==1),3], colnames(bfeats)[1])
dotplot(bfeats[which(metadata[,5]==1),3], colnames(bfeats)[1])
dotplot(bfeats[which(metadata[,6]==1),10], colnames(bfeats)[1])
?boxplot
boxplot(bfeats[,10])
boxplot(bfeats[,10], range=0)
boxplot(bfeats[,10], range=1)
boxplot(bfeats[,10], range=2)
boxplot(bfeats[,10], range=2, outline=TRUE)
boxplot(bfeats[,10], range=2, outline=TRUE, horizontal=TRUE)
layout(matrix(1, ncol=1))
boxplot(bfeats[,10], range=2, outline=TRUE, horizontal=TRUE)
boxplot(bfeats[,10], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,1], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,2], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,3], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,4], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,5], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,6], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,16], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,13], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,19], range=2, outline=TRUE, horizontal=TRUE)$out
names(boxplot(bfeats[,19], range=2, outline=TRUE, horizontal=TRUE)$out)
boxplot(bfeats[,19], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[which(metadata[,6]==1),19], range=2, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[which(metadata[,6]==1),19], range=3, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,19], range=3, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,1:19], range=3, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,1:10], range=3, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,1:3], range=3, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,1:1], range=3, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,11:14], range=3, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,11:14], range=1.5, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats[,11:14], range=2.5, outline=TRUE, horizontal=TRUE)$out
bfeats.scale = apply(bfeats, 2, scale)
summary(bfeats.scale)
boxplot(bfeats.scale[,11:14], range=2.5, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[,1:14], range=2.5, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[,15:30], range=2.5, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[,30:45], range=2.5, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[,45:59], range=2.5, outline=TRUE, horizontal=TRUE)$out
which(abs(bfeats.scale) > 3.5)
bfeats["176663"]
bfeats["176663",]
which(abs(bfeats.scale[,1]) > 3.5)
which(abs(bfeats.scale[,2]) > 3.5)
which(abs(bfeats.scale[,3]) > 3.5)
which(abs(bfeats.scale[,4]) > 3.5)
which(abs(bfeats.scale[,5]) > 3.5)
which(abs(bfeats.scale[,6]) > 3.5)
which(abs(bfeats.scale[,58]) > 3.5)
which(abs(bfeats.scale[,57]) > 3.5)
which(abs(bfeats.scale[,56]) > 3.5)
which(abs(bfeats.scale[,55]) > 3.5)
which(abs(bfeats.scale[,54]) > 3.5)
which(abs(bfeats.scale[,53]) > 3.5)
which(abs(bfeats.scale[,52]) > 3.5)
which(abs(bfeats.scale[,51]) > 3.5)
which(abs(bfeats.scale[,50]) > 3.5)
which(abs(bfeats.scale[,50]) > 4)
?apply
bfeats.scale_max = apply(bfeats.scale, 1, max)
str(bfeats.scale_max)
head(bfeats.scale_max)
which(abs(bfeats.scale_max) > 0)
which(abs(bfeats.scale_max) > 0.1)
count(which(abs(bfeats.scale_max) > 0.1))
length(which(abs(bfeats.scale_max) > 0.1))
length(which(abs(bfeats.scale_max) > 0.5))
length(which(abs(bfeats.scale_max) > 1))
length(which(abs(bfeats.scale_max) > 1.5))
length(which(abs(bfeats.scale_max) > 2))
length(which(abs(bfeats.scale_max) > 2.5))
length(which(abs(bfeats.scale_max) > 3))
length(which(abs(bfeats.scale_max) > 3.5))
length(which(abs(bfeats.scale_max) > 4))
length(which(abs(bfeats.scale_max) > 4.5))
length(which(abs(bfeats.scale_max) > 5))
which(abs(bfeats.scale_max) > 5)
bfeats2 = bfeats[-out,]
out = which(abs(bfeats.scale_max) > 5)
bfeats2 = bfeats[-out,]
str(bfeats2)
boxplot(bfeats.scale[,45:59], range=2.5, outline=TRUE, horizontal=TRUE)$out
bfeats2.scale = apply(bfeats2, 2, scale)
boxplot(bfeats2.scale[,45:59], range=2.5, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[-out,45:59], range=2.5, outline=TRUE, horizontal=TRUE)$out
dotplot(bfeats.scale[,10], colnames(bfeats)[1])
dotplot(bfeats.scale[,10:11], colnames(bfeats)[1])
dotplot(bfeats.scale[,1:11], colnames(bfeats)[1])
boxplot(bfeats.scale[-out,45:59], range=2.5, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[-out,45:59], range=5, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[-out,45:59], range=4, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[,45:59], range=4, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[,1:3], range=4, outline=TRUE, horizontal=TRUE)$out
boxplot(bfeats.scale[,1:3], range=4, outline=TRUE, horizontal=TRUE, main="Boxplot of features 1")
boxplot(bfeats.scale[,1:3], range=4, outline=TRUE, horizontal=TRUE, main="Boxplot of features 1-10")
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, horizontal=TRUE, main="Boxplot of features 1-10")
?boxplot
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, ylab=c(1:10) horizontal=TRUE, main="Boxplot of features 1-10")
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10) horizontal=TRUE, main="Boxplot of features 1-10")
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), horizontal=TRUE, main="Boxplot of features 1-10")
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), ylab="numb" horizontal=TRUE, main="Boxplot of features 1-10")
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), ylab="numb", horizontal=TRUE, main="Boxplot of features 1-10")
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), ylab="Index of Feature", horizontal=TRUE, main="Boxplot of features 1-10")
boxplot(bfeats.scale[,2:9], range=4, outline=TRUE, names=c(1:10), ylab="Index of Feature", horizontal=TRUE, main="Boxplot of features 1-10")
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), ylab="Index of Feature", horizontal=TRUE, main="Boxplot of features 1-10")
horizontal=TRUE, main="Boxplot of features 1-10", col=colors[1])
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of features 1-10", col=colors[1])
layout(matrix(1:2, ncol=2))
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of features 1-10", col=colors[1])
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of features 1-10", col=colors[1])
layout(matrix(1:2, ncol=2))
boxplot(bfeats.scale[,1:10], range=4, outline=TRUE, names=c(1:10), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of features 1-10", col=colors[1])
boxplot(bfeats.scale[,11:20], range=4, outline=TRUE, names=c(11:20), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of features 11-20", col=colors[1])
bfeats.cm_angle.scale = apply(bfeats.cm_angle, 2, scale)
layout(matrix(1:1, ncol=1))
boxplot(bfeats.cm_angle.scale[,1:9], range=4, outline=TRUE, names=c(1:9), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of cm_angle Features", col=colors[1])
bfeats.scale = apply(bfeats, 2, scale)
bfeats.cm_angle.scale = apply(bfeats.cm_angle, 2, scale)
bfeats.cm_conv.scale = apply(bfeats.cm_conv, 2, scale)
bfeats.cm_grad.scale = apply(bfeats.cm_grad, 2, scale)
bfeats.ela_conv.scale = apply(bfeats.ela_conv, 2, scale)
bfeats.ela_curv.scale = apply(bfeats.ela_curv, 2, scale)
bfeats.ela_local.scale = apply(bfeats.ela_local, 2, scale)
layout(matrix(1:1, ncol=1))
boxplot(bfeats.cm_conv.scale[,1:5], range=4, outline=TRUE, names=c(1:5), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of cm_angle Features", col=colors[1])
layout(matrix(1:1, ncol=1))
boxplot(bfeats.cm_angle.scale[,1:9], range=4, outline=TRUE, names=c(1:9), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of cm_angle Features", col=colors[1])
layout(matrix(1:1, ncol=1))
boxplot(bfeats.cm_grad.scale[,1:3], range=4, outline=TRUE, names=c(1:3), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of cm_grad Features", col=colors[1])
layout(matrix(1:1, ncol=1))
boxplot(bfeats.ela_conv.scale[,1:4], range=4, outline=TRUE, names=c(1:4), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_conv Features", col=colors[1])
layout(matrix(1:1, ncol=1))
boxplot(bfeats.ela_curv.scale[,1:12], range=4, outline=TRUE, names=c(1:12), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_curv Features", col=colors[1])
boxplot(bfeats.ela_curv.scale[,13:23], range=4, outline=TRUE, names=c(13:23), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_curv Features", col=colors[1])
layout(matrix(1:2, ncol=2))
boxplot(bfeats.ela_curv.scale[,1:12], range=4, outline=TRUE, names=c(1:12), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_curv Features", col=colors[1])
boxplot(bfeats.ela_curv.scale[,13:23], range=4, outline=TRUE, names=c(13:23), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_curv Features", col=colors[1])
bfeats.ela_curv[,17]
colnames(bfeats.ela_curv)[17]
layout(matrix(1:2, ncol=2))
boxplot(bfeats.ela_local.scale[,1:7], range=4, outline=TRUE, names=c(1:7), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_local Features", col=colors[1])
boxplot(bfeats.ela_local.scale[,8:14], range=4, outline=TRUE, names=c(8:214), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_local Features", col=colors[1])
layout(matrix(1:2, ncol=2))
boxplot(bfeats.ela_local.scale[,1:7], range=4, outline=TRUE, names=c(1:7), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_local Features", col=colors[1])
boxplot(bfeats.ela_local.scale[,8:14], range=4, outline=TRUE, names=c(8:14), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of ela_local Features", col=colors[1])
bfeats.cm_angle.scale_max = apply(bfeats.cm_angle.scale, 1, max)
bfeats.cm_angle.scale_max = apply(bfeats.cm_angle.scale, 1, max)
dotplot(bfeats.cm_angle.scale_max[,1:9], colnames(bfeats)[1])
dotplot(bfeats.cm_angle.scale_max, colnames(bfeats)[1])
layout(matrix(1, ncol=1))
dotplot(bfeats.cm_angle.scale_max, colnames(bfeats)[1])
dotplot(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
bfeats.cm_angle.scale_max = apply(bfeats.cm_angle.scale, 1, max)
bfeats.cm_conv.scale_max = apply(bfeats.cm_conv.scale, 1, max)
bfeats.cm_grad.scale_max = apply(bfeats.cm_grad.scale, 1, max)
bfeats.ela_conv.scale_max = apply(bfeats.ela_conv.scale, 1, max)
bfeats.ela_curv.scale_max = apply(bfeats.ela_curv.scale, 1, max)
bfeats.ela_local.scale_max = apply(bfeats.ela_local.scale, 1, max)
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
which(bfeats.cm_angle.scale_max > 4)
points(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], add=TRUE)
?points
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
dotplot.custom <- function(x, title) {
stripchart(x,method="stack",pch=1,main=title)
}
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
points(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)])
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
points(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red")
points(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red", cex=4)
which(bfeats.cm_angle.scale_max > 4)
bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)]
stripchart(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red", cex=4, add=TRUE)
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
stripchart(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red", cex=4, add=TRUE)
stripchart(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red", cex=2, add=TRUE)
stripchart(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red", cex=2, add=TRUE, pch=1)
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
stripchart(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red", cex=2, add=TRUE, pch=1)
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], colnames(bfeats)[1])
stripchart(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red", cex=3, add=TRUE, pch=1)
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], "cm_angle")
stripchart(bfeats.cm_angle.scale_max[which(bfeats.cm_angle.scale_max > 4)], col="red", cex=3, add=TRUE, pch=1)
dotplot.custom(bfeats.cm_conv.scale_max[which(metadata[,6]==1)], "cm_conv")
dotplot.custom(bfeats.cm_grad.scale_max[which(metadata[,6]==1)], "Dotplot cm_grad")
dotplot.custom(bfeats.cm_angle.scale_max[which(metadata[,6]==1)], "Dotplot cm_angle")
dotplot.custom(bfeats.cm_grad.scale_max[which(metadata[,6]==1)], "Dotplot cm_grad")
stripchart(bfeats.cm_grad.scale_max[which(bfeats.cm_grad.scale_max > 4)], col="red", cex=3, add=TRUE, pch=1)
stripchart(bfeats.cm_grad.scale_max[which(bfeats.cm_grad.scale_max > 4 & metadata[,6]==1)], col="red", cex=3, add=TRUE, pch=1)
dotplot.custom(bfeats.cm_grad.scale_max[which(metadata[,6]==1)], "Dotplot cm_grad")
stripchart(bfeats.cm_grad.scale_max[which(bfeats.cm_grad.scale_max > 4 & metadata[,6]==1)], col="red", cex=3, add=TRUE, pch=1)
dotplot.custom(bfeats.ela_conv.scale_max[which(metadata[,6]==1)], "Dotplot ela_conv")
#several ooutliers at the right
dotplot.custom(bfeats.ela_conv.scale_max[which(metadata[,6]==1)], "Dotplot ela_conv")
stripchart(bfeats.ela_conv.scale_max[which(bfeats.ela_conv.scale_max > 4 & metadata[,6]==1)], col="red", cex=3, add=TRUE, pch=1)
dotplot.custom(bfeats.ela_curv.scale_max[which(metadata[,6]==1)], "Dotplot ela_curv")
stripchart(bfeats.ela_curv.scale_max[which(bfeats.ela_curv.scale_max > 4 & metadata[,6]==1)], col="red", cex=3, add=TRUE, pch=1)
dotplot.custom(bfeats.ela_curv.scale_max[which(metadata[,6]==1)], "Dotplot ela_curv")
stripchart(bfeats.ela_curv.scale_max[which(bfeats.ela_curv.scale_max > 6 & metadata[,6]==1)], col="red", cex=3, add=TRUE, pch=1)
dotplot.custom(bfeats.ela_curv.scale_max[which(metadata[,6]==1)], "Dotplot ela_curv")
stripchart(bfeats.ela_curv.scale_max[which(bfeats.ela_curv.scale_max > 7 & metadata[,6]==1)], col="red", cex=3, add=TRUE, pch=1)
dotplot.custom(bfeats.ela_local.scale_max[which(metadata[,6]==1)], "Dotplot ela_local")
stripchart(bfeats.ela_local.scale_max[which(bfeats.ela_local.scale_max > 7 & metadata[,6]==1)], col="red", cex=3, add=TRUE, pch=1)
which(bfeats.ela_local.scale_max > 7
which(bfeats.ela_local.scale_max > 7 & metadata[,6]==1)
which(bfeats.ela_local.scale_max > 7 & metadata[,6]==1)
which(bfeats.ela_curv.scale_max > 7 & metadata[,6]==1)
which(bfeats.ela_conv.scale_max > 4 & metadata[,6]==1)
which(bfeats.cm_grad.scale_max > 4 & metadata[,6]==1)
which(bfeats.cm_angle.scale_max > 4)
which(bfeats.cm_angle.scale_max > 4 & metadata[,6] ==1)
layout(matrix(1:1, ncol=1))
boxplot(bfeats.cm_angle.scale[,1:9], range=4, outline=TRUE, names=c(1:9), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of cm_angle Features", col=colors[1])
layout(matrix(1:1, ncol=1))
boxplot(bfeats.cm_conv.scale[,1:5], range=4, outline=TRUE, names=c(1:5), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of cm_conv Features", col=colors[1])
layout(matrix(1:1, ncol=1))
boxplot(bfeats.cm_conv.scale[,1:5], range=4, outline=TRUE, names=c(1:5), ylab="Index of Feature",
horizontal=TRUE, main="Boxplot of cm_conv Features", col=colors[1])$out
