sum1 = sum1 + pow((x[i] - average), 2);
}
result = sum1 / (float)n;
return result;
'
)
var.c = cfunction(signature(n = "integer", x = "numeric"), language = "C",
convention = ".Call", body = '
float result, average, sum = 0, sum1 = 0;
for (int i = 0; i < *n; i++) {
sum = sum + x[i];
}
average = sum / *n;
for (int i = 0; i < *n; i++) {
sum1 = sum1 + pow((x[i] - average), 2);
}
result = sum1 / (float)*n;
return result;
'
)
var.c = cfunction(signature(n = "integer", x = "numeric"), language = "C",
convention = ".Call", body = '
int i;
float result, average, sum = 0, sum1 = 0;
for (i = 0; i < *n; i++) {
sum = sum + x[i];
}
return sum;
'
)
var.c = cfunction(signature(n = "integer", x = "numeric"), language = "C",
convention = ".C", body = '
int i;
float result, average, sum = 0, sum1 = 0;
for (i = 0; i < *n; i++) {
sum = sum + x[i];
}
return sum;
'
)
var.c = cfunction(signature(n = "integer", x = "numeric"), language = "C",
convention = ".C", body = '
int i;
float result, average, sum = 0, sum1 = 0;
for (i = 0; i < *n; i++) {
sum = sum + x[i];
}
'
)
var.c(x)
vapply.var(length(x), x)
var.c(length(x), x)
var.c = cfunction(signature(n = "integer", x = "numeric"), language = "C",
convention = ".Call", body = '
int i;
float result, average, sum = 0, sum1 = 0;
for (i = 0; i < *n; i++) {
sum = sum + x[i];
}
return sum;
'
)
library(mlbench)
data("BostonHousing")
View(BostonHousing)
set.seed(123)
summary(BostonHousing)
model = randomForest(age ~ ., data = BostonHousing, ntree = 30)
library(randomForest)
model = randomForest(age ~ ., data = BostonHousing, ntree = 30)
model
View(BostonHousing)
model = randomForest(rad., data = BostonHousing, ntree = 30)
model = randomForest(rad ~ ., data = BostonHousing, ntree = 30)
model
View(BostonHousing)
BostonHousing[-9]
pred = predict(model, newdata = BostonHousing[-9])
head(pred)
mean(as.character(pred) != as.character(BostonHousing$rad))
View(BostonHousing)
model = randomForest(tax ~ ., data = BostonHousing, ntree = 30)
model
View(BostonHousing)
pred = predict(model, newdata = BostonHousing[-10])
head(pred)
mean(as.character(pred) != as.character(BostonHousing$tax))
task = makeClassifTask(data = BostonHousing, target = "tax")
library(mlr)
task = makeClassifTask(data = BostonHousing, target = "tax")
model = randomForest(chas ~ ., data = BostonHousing, ntree = 30)
model
View(BostonHousing)
pred = predict(model, newdata = BostonHousing[-4])
head(pred)
mean(as.character(pred) != as.character(BostonHousing$tax))
mean(as.character(pred) != as.character(BostonHousing$chas))
task = makeClassifTask(data = BostonHousing, target = "chas")
task
lrn = makeLearner("classif.randomForest", ntree = 30)
lrn
set.seed(123)
model = train(learner = lrn, task = task)
model
pred = predict(object = model, task = task)
head(pred$data)
performance(pred = pred, measures = mmce)
clLrn = makeLearner("classif.ksvm", predict.type = "prob", par.vals = list(kernel = "rbfdot", C = 2^(-3)))
install.packages("kernlab")
clLrn = makeLearner("classif.ksvm", predict.type = "prob", par.vals = list(kernel = "rbfdot", C = 2^(-3)))
clLrn
regLrn = makeLearner("reg.kknn", k = 3, kernel = "gaussian")
install.packages("kknn")
regLrn = makeLearner("reg.kknn", k = 3, kernel = "gaussian")
regLrn = makeLearner("regr.kknn", k = 3, kernel = "gaussian")
regLrn
rdesc = makeResampleDesc("CV", iters = 5)
rdesc
set.seed(123)
task = makeClassifTask(data = BostonHousing, target = chas)
task = makeClassifTask(data = BostonHousing, target = "chas")
rinst = makeResampleInstance(desc = rdesc, task = task)
rinst
str(rinst)
rinst
rdesc = makeResampleDesc("CV", iters = 10)
rdesc
set.seed(123)
task = makeClassifTask(data = BostonHousing, target = "chas")
rinst = makeResampleInstance(desc = rdesc, task = task)
rinst
rinst = makeResampleInstance("Holdout", size = 20, split = 0.8)
rinst
rinst[c("train.inds", "test.inds")]
task = makeClassifTask(data = BostonHousing, target = "chas")
lrn = makeLearner("classif.rpart")
rdesc = makeResampleDesc("CV", iters = 10)
r = resample(learner = lrn, task = task, resampling = rdesc)
r
r$aggr
head(r$pred$data)
head(r$measures.test)
my.mmce = function(task, model, pred, feats, extra.args) {
tb = table(pred$data$response, pred$data$truth)
1 - sum(diag(tb)) / sum(tb)
}
my.mmce = makeMeasure(id = "my.mmce", minimize = TRUE, properties = c("classif", "classif.multi", "response"), fun = my.mmce)
my.mmce
task = makeClassifTask(data = BostonHousing, target = "chas")
lrn = makeLearner("classif.ksvm")
mod = train(lrn, task)
pred = predict(mod, newdata = BostonHousing)
performance(pred, measures = list(my.mmce, mmce))
summary(Cars93)
data("cars")
summary(cars)
View(cars)
?mmce
performance(pred, measures = list(mse, medse, mae))
pred = predict(mod, newdata = BostonHousing)
performance(pred, measures = list(mse, medse, mae))
performance(pred, measures = list(mse, medse, mae, mmce))
performance(pred, measures = list(medse, mae, mmce))
lrn = makeLearner("regr.gbm", n.trees = 1000)
install.packages(gbm)
install.packages("gbm")
lrn = makeLearner("regr.gbm", n.trees = 1000)
mod = train(lrn, task)
task = makeClassifTask(data = BostonHousing, target = "chas")
lrn = makeLearner("regr.gbm", n.trees = 1000)
mod = train(lrn, task)
task = makeRegrTask(data = BostonHousing, target = "chas")
View(BostonHousing)
task = makeRegrTask(data = BostonHousing, target = "tax")
lrn = makeLearner("regr.gbm", n.trees = 1000)
mod = train(lrn, task)
pred = predict(mod, newdata = BostonHousing)
performance(pred, measures = list(mse, medse, mae, mmce))
performance(pred, measures = list(mse, medse, mae))
listMeasures(BostonHousing)
listMeasures(BostonHousing.task)
bh = BostonHousing
listMeasures(bh.task)
lrn = makeLearner("classif.ksvm")
mod = train(lrn, task)
pred = predict(mod, newdata = BostonHousing)
task = makeClassifTask(data = BostonHousing, target = "chas")
lrn = makeLearner("classif.ksvm")
mod = train(lrn, task)
pred = predict(mod, newdata = BostonHousing)
performance(pred, measures = list(my.mmce, mmce))
performance(pred, measures = list(listMeasures(bh.task)))
performance(pred, measures = list(featperc, medae, mae, medse, rmse, timeboth, mse, sae, timepredict, sse, timetrain))
performance(pred, measures = list(medae, mae, medse, rmse, timeboth, mse, sae, timepredict, sse, timetrain))
lrn1 = makeLearner("classif.ksvm")
lrn2 = makeLearner("classif.randomForest")
lrn3 = makeLearner("classif.rpart")
lrn4 = makeLearner("classif.kknn")
rinst = makeResampleInstance("CV", iters = 10, task = task)
rinst2 = makeResampleInstance("Bootstrap", iters = 50, task = task)
rinst1 = makeResampleInstance("CV", iters = 10, task = task)
b = benchmark(learners = list(lrn1, lrn2, lrn3, lrn4), tasks = task, resamplings = list(rinst1, rinst2))
b = benchmark(learners = list(lrn1, lrn2, lrn3, lrn4), tasks = task, resamplings = list(rinst1, rinst2), measures = list(mmce, timeboth, acc))
rinst1 = makeResampleInstance("CV", iters = 10, task = task)
rinst2 = makeResampleInstance("Bootstrap", iters = 50, task = task)
b = benchmark(learners = list(lrn1, lrn2, lrn3, lrn4),
tasks = task,
resamplings = list(rinst1, rinst2),
measures = list(mmce, timeboth, acc))
library(mlbench)
data("Satellite")
task2 = makeClassifTask(data = Satellite, target = "classes")
task1 = makeClassifTask(data = BostonHousing, target = "chas")
b = benchmark(learners = list(lrn1, lrn2, lrn3, lrn4),
tasks = list(task1, task2),
resamplings = list(rinst1, rinst2),
measures = list(mmce, timeboth, acc))
rinst1 = makeResampleInstance("CV", iters = 10, task = task1)
rinst2 = makeResampleInstance("Bootstrap", iters = 200, task = task2)
b = benchmark(learners = list(lrn1, lrn2, lrn3, lrn4),
tasks = list(task1, task2),
resamplings = list(rinst1, rinst2),
measures = list(mmce, timeboth, acc))
rinst2 = makeResampleInstance("Bootstrap", iters = 50, task = task2)
b = benchmark(learners = list(lrn1, lrn2, lrn3, lrn4),
tasks = list(task1, task2),
resamplings = list(rinst1, rinst2),
measures = list(mmce, timeboth, acc))
rinst1 = makeResampleInstance("CV", iters = 10, task = task1)
rinst2 = makeResampleInstance("Bootstrap", iters = 10, task = task2)
b = benchmark(learners = list(lrn1, lrn2, lrn3, lrn4),
tasks = list(task1, task2),
resamplings = list(rinst1, rinst2),
measures = list(mmce, timeboth, acc))
b
install.packages("smoof")
ackley = function(x, y) {
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * cos(2 * pi * x) + cos(2 * pi * y)) + exp(1) + 20
return(form)
}
ackley(0, 0)
ackley = function(x, y) {
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(0, 0)
ackley(1, 0)
ackley(0.4, 0.2)
res = optim(par = c(10, 15), fn = ackley, method = "Nelder-Mead")
res = optim(par = c(10, 15), c(13, 23), fn = ackley, method = "Nelder-Mead")
?optim
ackley = function(x) {
form = -20 * exp(-0.2 * sqrt(0.5 * (x[0]^2 + x[1]^2))) - exp(0.5 * (cos(2 * pi * x[0]) + cos(2 * pi * x[1]))) + exp(1) + 20
return(form)
}
ackley(0.4, 0.2)
ackley(c(0.4, 0.2))
print(ackley(c(0.4, 0.2)))
ackley = function(x, y) {
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(0.4, 0.2)
ackley(0, 0)
res = optim(par = 10, 15, fn = ackley, method = "Nelder-Mead")
res = optim(par = 0.4, fn = ackley, method = "Nelder-Mead", x = 0.3)
ackley = function(x) {
x = x[1]
y = x[2]
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(0)
ackley = function(v) {
x = v[1]
y = v[2]
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(0)
ackley = function(v) {
x = v[1]
y = v[2]
print(x)
print(y)
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(0)
ackley = function(v) {
x = v[0]
y = v[1]
print(x)
print(y)
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(0)
ackley = function(v) {
x = v[0]
y = v[1]
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(0)
ackley = function(v) {
x = v[0]
y = v[1]
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(as.numeric(form))
}
ackley(0)
ackley = function(v) {
x = v[0]
y = v[1]
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(as.double(form))
}
ackley(0)
ackley(c(3, 4))
ackley = function(v) {
x = v[0]
y = v[1]
print(x)
print(y)
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(as.double(form))
}
ackley(c(3, 4))
ackley = function(x) {
#x = x[1]
y = x[2]
print(x)
print(y)
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(as.double(form))
}
ackley(c(3, 4))
ackley = function(x) {
y = x[2]
x = x[1]
print(x)
print(y)
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(as.double(form))
}
ackley(c(3, 4))
res = optim(par = c(3, 4), fn = ackley, method = "Nelder-Mead")
res
ackley(c(0, 0))
ackley = function(x) {
y = x[2]
x = x[1]
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(as.double(form))
}
ackley(c(0, 0))
res = optim(par = c(0, 0), fn = ackley, method = "Nelder-Mead")
res
res = optim(par = c(10, 15), fn = ackley, method = "Nelder-Mead")
res
?plot
ackley = function(x) {
y = x[2]
x = x[1]
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(c(0, 0))
d = data.frame(x = c(1, 2, 3, 4, 5), y = c(1, 3, 5, 7, 9))
plot(y ~ x, data = data, main = "Hola")
d = data.frame(x = c(1, 2, 3, 4, 5), y = c(1, 3, 5, 7, 9))
plot(y ~ x, data = data, main = "Hola")
abline(a = res$par[1], b = res$par[2], col = "darkred")
plot(y ~ x, data = data, main = "Hola")
res = optim(par = c(10, 15), fn = ackley, method = "Nelder-Mead")
res
res$par
plot(y ~ x, data = d, main = "Hola")
abline(a = res$par[1], b = res$par[2], col = "darkred")
points(res$par[1], res$par[2])
plot(y ~ x, data = d, main = "Hola")
points(res$par[1], res$par[2])
res$par
# Ackley's function
d = data.frame(x = c(1, 2, 3, 4, 5), y = c(1, 3, 5, 7, 9))
ackley = function(x) {
y = x[2]
x = x[1]
form = -20 * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + exp(1) + 20
return(form)
}
ackley(c(0, 0))
res = optim(par = c(10, 15), fn = ackley, method = "Nelder-Mead")
res$par
ackley = function(X) {
m = matrix(X, ncol = 2)
form = -20 * exp(-0.2 * sqrt(0.5 * (m[,1]^2 + m[,2]^2)))
- exp(0.5 * (cos(2 * pi * m[,1]) + cos(2 * pi * m[,2])))
+ exp(1) + 20
return(form)
}
x = seq(-10, 10, length = 101)
y = seq(-10, 10, length = 101)
X = as.matrix(expand.grid(x, y))
colnames(X) = c("x", "y")
ackley(X)
a = ackley(X)
d = data.frame(X, z)
d = data.frame(X, a)
library(lattice)
wireframe(a ~ x * y, data = d, main = "Ackley's Function", shade = TRUE, scales = list(arrows = FALSE), screen = list(z = -50, x = -70))
res = optim(par = c(-1, 1), fn = ackley, method = "Nelder-Mead")
res$par
wireframe(a ~ x * y, data = d, main = "Ackley's Function", shade = FALSE, scales = list(arrows = FALSE), screen = list(z = -50, x = -70))
wireframe(a ~ x * y, data = d, main = "Ackley's Function", shade = TRUE, scales = list(arrows = FALSE), screen = list(z = -50, x = -70))
x = seq(-10, 10, length = 10)
y = seq(-10, 10, length = 10)
X = as.matrix(expand.grid(x, y))
colnames(X) = c("x", "y")
a = ackley(X)
d = data.frame(X, a)
library(lattice)
wireframe(a ~ x * y, data = d, main = "Ackley's Function",
shade = TRUE,
scales = list(arrows = FALSE),
screen = list(z = -50, x = -70))
res = optim(par = c(-1, 1), fn = ackley, method = "Nelder-Mead")
res$par
X
View(d)
x = seq(-10, 10, length = 101)
y = seq(-10, 10, length = 101)
X = as.matrix(expand.grid(x, y))
colnames(X) = c("x", "y")
a = ackley(X)
d = data.frame(X, a)
library(lattice)
wireframe(a ~ x * y, data = d, main = "Ackley's Function",
shade = TRUE,
scales = list(arrows = FALSE),
screen = list(z = -50, x = -70))
res = optim(par = c(-1, 1), fn = ackley, method = "Nelder-Mead")
res$par
View(d)
res = optim(par = c(5, 5), fn = ackley, method = "Nelder-Mead")
res$par
devtools::install_github("jakobbossek/ecr")
devtools::install_github("jakobbossek/smoof")
library(ecr)
library(ecr)
install.packages("checkmate")
install.packages("checkmate")
install.packages("checkmate")
install.packages("checkmate")
library(ecr)
fn = makeSingleObjectiveFunction(name = "Testfunction",
fn = function(x) x * sin(2 * x),
par.set = makeNumericParamSet("x", lower = 0, upper = 2 * pi))
autoplot(fn)
ctrl = setupECRControl(n.population = 10L,
n.offspring = 10L,
survival.strategy = "plus",
representation = "float",
stopping.conditions = setupStoppingConditions(max.iter = 30L),
monitor = makeNullMonitor())
ctrl = setupEvolutionaryOperators(ctrl, mutator = makeGaussMutator(p = 1L, sdev = 0.05))
ctrl
res = doTheEvolution(fn, ctrl)
res
onemax = makeSingleObjectiveFunction(name = "One-Max",
fn = function(x) length(x) - sum(x),
par.set = makeParamSet(makeIntegerVectorParam(len = 50, id = "x", lower = 0, upper = 1)))
ctrl = setupECRControl(n.population = 1L,
n.offspring = 1L,
n.mating.pool = 1L,
representation = "binary",
survival.strategy = "plus",
monitor = makeNullMonitor(),
stopping.conditions = setupStoppingConditions(max.iter = 1000L))
?makeAckleyFunction
makeAckleyFunction(1)
ctrl = setupEvolutionaryOperators(ctrl, mutator = makeBitFlipMutator(p = 1 / 50), recombinator = makeNullRecombinator())
res = doTheEvolution(onemax, ctrl)
autoplot(res, log.fitness = FALSE, complete.trace = TRUE)
ackley = makeAckleyFunction(1)
ctrl = setupECRControl(n.population = 10L,
n.offspring = 10L,
representation = "float",
survival.strategy = "plus",
stopping.conditions = setupStoppingConditions(max.iter = 1000L),
monitor = makeNullMonitor())
ctrl = setupEvolutionaryOperators(ctrl, mutator = makeGaussMutator(p = 1L, sdev = 0.05))
res = doTheEvolution(ackley, ctrl)
res
autoplot(res, log.fitness = FALSE, complete.trace = TRUE)
res
ackley.2d = makeAckleyFunction(2)
ctrl = setupECRControl(n.population = 10L,
n.offspring = 10L,
representation = "float",
survival.strategy = "plus",
stopping.conditions = setupStoppingConditions(max.iter = 1000L),
monitor = makeNullMonitor())
ctrl = setupEvolutionaryOperators(ctrl, mutator = makeGaussMutator(p = 1L, sdev = 0.05))
res = doTheEvolution(ackley.2d, ctrl)
res
ackley.2d
autoplot(ackley)
autoplot(ackley.2d)
install.packages(c("roxygen2", "devtools", "testthat"))
package.skeleton(myPackage)
